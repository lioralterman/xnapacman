// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,IDENTIFIER=128,NUMBER=129,KWIF=130,KWELSE=131,KWWHILE=132,KWFOR=133,KWCONTINUE=134,KWBREAK=135,KWRETURN=136,KWEXTERN=137,KWSTATIC=138,KWAUTO=139,KWINT=140,KWVOID=141,EQ=142,NEQ=143,GT=144,GTE=145,LT=146,LTE=147,AMPAMP=148,BARBAR=149,maxParseToken=150,LEX_WHITE=151,LEX_COMMENT=152,LEX_ERROR=153};

public partial struct LexValue
#line 9 "GeneratorSource\parser.y"
			{
    public string str;
}
// Abstract base class to allow overriding of Get/SetEolState
public abstract class ScanBase : AScanner<LexValue,LexLocation>, IColorScan
{
    protected int currentScOrd;
    public virtual int GetEolState() { return currentScOrd; }
    public virtual void SetEolState(int value) { currentScOrd = value; }
    public abstract void SetSource(string s, int o);
    public abstract int GetNext(ref int c, out int s, out int e);
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{
#line 14 "GeneratorSource\parser.y"

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }
    internal TextSpan MkTSpan(LexLocation s) { return TextSpan(s.sLin, s.sCol, s.eLin, s.eCol); }

    internal void Match(LexLocation lh, LexLocation rh) 
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh)); 
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[167];
    AddState(0,new State(new int[]{138,138,139,139,137,140,140,136,141,137,128,163,127,-5},new int[]{-1,1,-3,3,-4,4,-5,7,-6,8,-7,159,-10,166,-12,127}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(-2));
    AddState(4,new State(new int[]{126,6,138,138,139,139,137,140,140,136,141,137,128,163,127,-5},new int[]{-3,5,-4,4,-5,7,-6,8,-7,159,-10,166,-12,127}));
    AddState(5,new State(-3));
    AddState(6,new State(-4));
    AddState(7,new State(-6));
    AddState(8,new State(new int[]{128,156,140,136,141,137},new int[]{-7,9}));
    AddState(9,new State(new int[]{128,10}));
    AddState(10,new State(new int[]{40,144,59,-17,44,-17,126,-17},new int[]{-8,11}));
    AddState(11,new State(new int[]{123,110},new int[]{-9,12,-14,13}));
    AddState(12,new State(-7));
    AddState(13,new State(new int[]{126,19,125,18,138,138,139,139,137,140,140,136,141,137,128,67,33,65,129,68,40,70,136,94,135,96,134,97,132,98,133,101,130,104,123,110},new int[]{-15,14,-16,15,-11,22,-10,125,-12,127,-6,133,-7,141,-17,143,-18,24,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(14,new State(-30));
    AddState(15,new State(new int[]{126,17,125,18},new int[]{-15,16}));
    AddState(16,new State(-31));
    AddState(17,new State(-32));
    AddState(18,new State(-35));
    AddState(19,new State(new int[]{125,21},new int[]{-15,20}));
    AddState(20,new State(-33));
    AddState(21,new State(new int[]{59,-73,126,-35,138,-35,139,-35,137,-35,140,-35,141,-35,128,-35,127,-35,33,-35,129,-35,40,-35,136,-35,135,-35,134,-35,132,-35,133,-35,130,-35,123,-35,125,-35,131,-35}));
    AddState(22,new State(new int[]{128,67,33,65,129,68,40,70,126,74,136,94,135,96,134,97,132,98,133,101,130,104,123,110,125,-37},new int[]{-17,23,-18,24,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(23,new State(-36));
    AddState(24,new State(new int[]{128,67,33,65,129,68,40,70,126,74,136,94,135,96,134,97,132,98,133,101,130,104,123,110,125,-40},new int[]{-17,25,-18,24,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(25,new State(-39));
    AddState(26,new State(new int[]{59,27,126,28}));
    AddState(27,new State(-41));
    AddState(28,new State(new int[]{59,29}));
    AddState(29,new State(-42));
    AddState(30,new State(-57));
    AddState(31,new State(new int[]{61,32,46,53,40,76,42,-101,47,-101,43,-101,45,-101,124,-101,38,-101,94,-101,144,-101,145,-101,146,-101,147,-101,142,-101,143,-101,148,-101,149,-101,33,-101,128,-101,129,-101,59,-101,126,-101,41,-101},new int[]{-27,52,-28,56}));
    AddState(32,new State(new int[]{33,65,128,67,129,68,40,70,126,74},new int[]{-23,33,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(33,new State(-68));
    AddState(34,new State(new int[]{148,91,149,92,33,65,128,67,129,68,40,70,59,-71,126,-71,41,-71,44,-71},new int[]{-32,35,-31,90,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(35,new State(new int[]{33,65,128,67,129,68,40,70,126,74},new int[]{-23,36,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(36,new State(-70));
    AddState(37,new State(new int[]{144,84,145,85,146,86,147,87,142,88,143,89,148,-77,149,-77,33,-77,128,-77,129,-77,40,-77,59,-77,126,-77,41,-77,44,-77},new int[]{-34,38}));
    AddState(38,new State(new int[]{33,65,128,67,129,68,40,70},new int[]{-31,39,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(39,new State(-76));
    AddState(40,new State(new int[]{124,81,38,82,94,83,144,-85,145,-85,146,-85,147,-85,142,-85,143,-85,148,-85,149,-85,33,-85,128,-85,129,-85,40,-85,59,-85,126,-85,41,-85,44,-85},new int[]{-36,41}));
    AddState(41,new State(new int[]{33,65,128,67,129,68,40,70},new int[]{-33,42,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(42,new State(-84));
    AddState(43,new State(new int[]{43,79,45,80,124,-90,38,-90,94,-90,144,-90,145,-90,146,-90,147,-90,142,-90,143,-90,148,-90,149,-90,33,-90,128,-90,129,-90,40,-90,59,-90,126,-90,41,-90,44,-90},new int[]{-38,44}));
    AddState(44,new State(new int[]{33,65,128,67,129,68,40,70},new int[]{-35,45,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(45,new State(-89));
    AddState(46,new State(new int[]{42,77,47,78,43,-94,45,-94,124,-94,38,-94,94,-94,144,-94,145,-94,146,-94,147,-94,142,-94,143,-94,148,-94,149,-94,33,-94,128,-94,129,-94,40,-94,59,-94,126,-94,41,-94,44,-94},new int[]{-40,47}));
    AddState(47,new State(new int[]{33,65,128,67,129,68,40,70},new int[]{-37,48,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(48,new State(-93));
    AddState(49,new State(new int[]{128,67,129,68,40,70},new int[]{-42,50,-30,51,-22,69}));
    AddState(50,new State(-97));
    AddState(51,new State(new int[]{46,53,40,76,42,-101,47,-101,43,-101,45,-101,124,-101,38,-101,94,-101,144,-101,145,-101,146,-101,147,-101,142,-101,143,-101,148,-101,149,-101,33,-101,128,-101,129,-101,59,-101,126,-101,41,-101,44,-101},new int[]{-27,52,-28,56}));
    AddState(52,new State(-100));
    AddState(53,new State(new int[]{128,54,126,55}));
    AddState(54,new State(-105));
    AddState(55,new State(-106));
    AddState(56,new State(new int[]{41,61,33,65,128,67,129,68,40,70,126,74},new int[]{-29,57,-26,58,-23,62,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(57,new State(-63));
    AddState(58,new State(new int[]{126,60,41,61},new int[]{-29,59}));
    AddState(59,new State(-64));
    AddState(60,new State(-65));
    AddState(61,new State(-67));
    AddState(62,new State(new int[]{44,63,126,-62,41,-62}));
    AddState(63,new State(new int[]{33,65,128,67,129,68,40,70,126,74},new int[]{-26,64,-23,62,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(64,new State(-61));
    AddState(65,new State(-99));
    AddState(66,new State(-98));
    AddState(67,new State(-104));
    AddState(68,new State(-102));
    AddState(69,new State(-103));
    AddState(70,new State(new int[]{33,65,128,67,129,68,40,70,126,74},new int[]{-23,71,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(71,new State(new int[]{41,72,126,73}));
    AddState(72,new State(-51));
    AddState(73,new State(-52));
    AddState(74,new State(new int[]{125,75}));
    AddState(75,new State(-73));
    AddState(76,new State(-66));
    AddState(77,new State(-95));
    AddState(78,new State(-96));
    AddState(79,new State(-91));
    AddState(80,new State(-92));
    AddState(81,new State(-86));
    AddState(82,new State(-87));
    AddState(83,new State(-88));
    AddState(84,new State(-78));
    AddState(85,new State(-79));
    AddState(86,new State(-80));
    AddState(87,new State(-81));
    AddState(88,new State(-82));
    AddState(89,new State(-83));
    AddState(90,new State(-72));
    AddState(91,new State(-74));
    AddState(92,new State(-75));
    AddState(93,new State(-69));
    AddState(94,new State(new int[]{33,65,128,67,129,68,40,70,126,74},new int[]{-23,95,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(95,new State(-58));
    AddState(96,new State(-59));
    AddState(97,new State(-60));
    AddState(98,new State(new int[]{40,70,126,112},new int[]{-20,99,-22,111}));
    AddState(99,new State(new int[]{128,67,33,65,129,68,40,70,126,74,136,94,135,96,134,97,132,98,133,101,130,104,123,110},new int[]{-18,100,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(100,new State(-43));
    AddState(101,new State(new int[]{40,114},new int[]{-21,102}));
    AddState(102,new State(new int[]{128,67,33,65,129,68,40,70,126,74,136,94,135,96,134,97,132,98,133,101,130,104,123,110},new int[]{-18,103,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(103,new State(-44));
    AddState(104,new State(new int[]{40,70,126,112},new int[]{-20,105,-22,111}));
    AddState(105,new State(new int[]{128,67,33,65,129,68,40,70,126,74,136,94,135,96,134,97,132,98,133,101,130,104,123,110},new int[]{-18,106,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(106,new State(new int[]{131,107,128,-45,33,-45,129,-45,40,-45,126,-45,136,-45,135,-45,134,-45,132,-45,133,-45,130,-45,123,-45,125,-45}));
    AddState(107,new State(new int[]{128,67,33,65,129,68,40,70,126,74,136,94,135,96,134,97,132,98,133,101,130,104,123,110},new int[]{-18,108,-19,26,-25,30,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69,-9,109,-14,13}));
    AddState(108,new State(-46));
    AddState(109,new State(-47));
    AddState(110,new State(-34));
    AddState(111,new State(-48));
    AddState(112,new State(new int[]{41,113,128,-50,33,-50,129,-50,40,-50,126,-50,136,-50,135,-50,134,-50,132,-50,133,-50,130,-50,123,-50}));
    AddState(113,new State(-49));
    AddState(114,new State(new int[]{126,118,128,67,33,65,129,68,40,70},new int[]{-24,115,-25,120,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69}));
    AddState(115,new State(new int[]{41,116,126,117}));
    AddState(116,new State(-53));
    AddState(117,new State(-54));
    AddState(118,new State(new int[]{41,119,125,75}));
    AddState(119,new State(-55));
    AddState(120,new State(new int[]{59,121}));
    AddState(121,new State(new int[]{33,65,128,67,129,68,40,70,126,74},new int[]{-23,122,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-30,51,-22,69}));
    AddState(122,new State(new int[]{59,123}));
    AddState(123,new State(new int[]{128,67,33,65,129,68,40,70,126,74},new int[]{-25,124,-30,31,-23,93,-31,34,-33,37,-35,40,-37,43,-39,46,-41,49,-42,66,-22,69}));
    AddState(124,new State(-56));
    AddState(125,new State(new int[]{138,138,139,139,137,140,140,136,141,137,128,-13,33,-13,129,-13,40,-13,126,-13,136,-13,135,-13,134,-13,132,-13,133,-13,130,-13,123,-13,125,-13},new int[]{-11,126,-10,125,-12,127,-6,133,-7,141}));
    AddState(126,new State(-12));
    AddState(127,new State(new int[]{59,128,44,129,126,131}));
    AddState(128,new State(-14));
    AddState(129,new State(new int[]{128,130}));
    AddState(130,new State(-16));
    AddState(131,new State(new int[]{59,132}));
    AddState(132,new State(-15));
    AddState(133,new State(new int[]{140,136,141,137},new int[]{-7,134}));
    AddState(134,new State(new int[]{128,135}));
    AddState(135,new State(-17));
    AddState(136,new State(-28));
    AddState(137,new State(-29));
    AddState(138,new State(-25));
    AddState(139,new State(-26));
    AddState(140,new State(-27));
    AddState(141,new State(new int[]{128,142}));
    AddState(142,new State(-18));
    AddState(143,new State(-38));
    AddState(144,new State(new int[]{41,145,126,152,140,136,141,137},new int[]{-13,146,-7,154}));
    AddState(145,new State(-21));
    AddState(146,new State(new int[]{41,147,126,148,44,149}));
    AddState(147,new State(-22));
    AddState(148,new State(-23));
    AddState(149,new State(new int[]{140,136,141,137},new int[]{-7,150}));
    AddState(150,new State(new int[]{128,151}));
    AddState(151,new State(-19));
    AddState(152,new State(new int[]{41,153}));
    AddState(153,new State(-24));
    AddState(154,new State(new int[]{128,155}));
    AddState(155,new State(-20));
    AddState(156,new State(new int[]{40,144},new int[]{-8,157}));
    AddState(157,new State(new int[]{123,110},new int[]{-9,158,-14,13}));
    AddState(158,new State(-8));
    AddState(159,new State(new int[]{128,160}));
    AddState(160,new State(new int[]{40,144,59,-18,44,-18,126,-18},new int[]{-8,161}));
    AddState(161,new State(new int[]{123,110},new int[]{-9,162,-14,13}));
    AddState(162,new State(-9));
    AddState(163,new State(new int[]{40,144},new int[]{-8,164}));
    AddState(164,new State(new int[]{123,110},new int[]{-9,165,-14,13}));
    AddState(165,new State(-10));
    AddState(166,new State(-11));

    rules=new Rule[107];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-3, new int[]{-4,-3});
    rules[4]=new Rule(-3, new int[]{-4,126});
    rules[5]=new Rule(-3, new int[]{});
    rules[6]=new Rule(-4, new int[]{-5});
    rules[7]=new Rule(-5, new int[]{-6,-7,128,-8,-9});
    rules[8]=new Rule(-5, new int[]{-6,128,-8,-9});
    rules[9]=new Rule(-5, new int[]{-7,128,-8,-9});
    rules[10]=new Rule(-5, new int[]{128,-8,-9});
    rules[11]=new Rule(-5, new int[]{-10});
    rules[12]=new Rule(-11, new int[]{-10,-11});
    rules[13]=new Rule(-11, new int[]{-10});
    rules[14]=new Rule(-10, new int[]{-12,59});
    rules[15]=new Rule(-10, new int[]{-12,126,59});
    rules[16]=new Rule(-12, new int[]{-12,44,128});
    rules[17]=new Rule(-12, new int[]{-6,-7,128});
    rules[18]=new Rule(-12, new int[]{-7,128});
    rules[19]=new Rule(-13, new int[]{-13,44,-7,128});
    rules[20]=new Rule(-13, new int[]{-7,128});
    rules[21]=new Rule(-8, new int[]{40,41});
    rules[22]=new Rule(-8, new int[]{40,-13,41});
    rules[23]=new Rule(-8, new int[]{40,-13,126});
    rules[24]=new Rule(-8, new int[]{40,126,41});
    rules[25]=new Rule(-6, new int[]{138});
    rules[26]=new Rule(-6, new int[]{139});
    rules[27]=new Rule(-6, new int[]{137});
    rules[28]=new Rule(-7, new int[]{140});
    rules[29]=new Rule(-7, new int[]{141});
    rules[30]=new Rule(-9, new int[]{-14,-15});
    rules[31]=new Rule(-9, new int[]{-14,-16,-15});
    rules[32]=new Rule(-9, new int[]{-14,-16,126});
    rules[33]=new Rule(-9, new int[]{-14,126,-15});
    rules[34]=new Rule(-14, new int[]{123});
    rules[35]=new Rule(-15, new int[]{125});
    rules[36]=new Rule(-16, new int[]{-11,-17});
    rules[37]=new Rule(-16, new int[]{-11});
    rules[38]=new Rule(-16, new int[]{-17});
    rules[39]=new Rule(-17, new int[]{-18,-17});
    rules[40]=new Rule(-17, new int[]{-18});
    rules[41]=new Rule(-18, new int[]{-19,59});
    rules[42]=new Rule(-18, new int[]{-19,126,59});
    rules[43]=new Rule(-18, new int[]{132,-20,-18});
    rules[44]=new Rule(-18, new int[]{133,-21,-18});
    rules[45]=new Rule(-18, new int[]{130,-20,-18});
    rules[46]=new Rule(-18, new int[]{130,-20,-18,131,-18});
    rules[47]=new Rule(-18, new int[]{-9});
    rules[48]=new Rule(-20, new int[]{-22});
    rules[49]=new Rule(-20, new int[]{126,41});
    rules[50]=new Rule(-20, new int[]{126});
    rules[51]=new Rule(-22, new int[]{40,-23,41});
    rules[52]=new Rule(-22, new int[]{40,-23,126});
    rules[53]=new Rule(-21, new int[]{40,-24,41});
    rules[54]=new Rule(-21, new int[]{40,-24,126});
    rules[55]=new Rule(-21, new int[]{40,126,41});
    rules[56]=new Rule(-24, new int[]{-25,59,-23,59,-25});
    rules[57]=new Rule(-19, new int[]{-25});
    rules[58]=new Rule(-19, new int[]{136,-23});
    rules[59]=new Rule(-19, new int[]{135});
    rules[60]=new Rule(-19, new int[]{134});
    rules[61]=new Rule(-26, new int[]{-23,44,-26});
    rules[62]=new Rule(-26, new int[]{-23});
    rules[63]=new Rule(-27, new int[]{-28,-29});
    rules[64]=new Rule(-27, new int[]{-28,-26,-29});
    rules[65]=new Rule(-27, new int[]{-28,-26,126});
    rules[66]=new Rule(-28, new int[]{40});
    rules[67]=new Rule(-29, new int[]{41});
    rules[68]=new Rule(-25, new int[]{-30,61,-23});
    rules[69]=new Rule(-25, new int[]{-23});
    rules[70]=new Rule(-23, new int[]{-31,-32,-23});
    rules[71]=new Rule(-23, new int[]{-31});
    rules[72]=new Rule(-23, new int[]{-31,-31});
    rules[73]=new Rule(-23, new int[]{126,125});
    rules[74]=new Rule(-32, new int[]{148});
    rules[75]=new Rule(-32, new int[]{149});
    rules[76]=new Rule(-31, new int[]{-33,-34,-31});
    rules[77]=new Rule(-31, new int[]{-33});
    rules[78]=new Rule(-34, new int[]{144});
    rules[79]=new Rule(-34, new int[]{145});
    rules[80]=new Rule(-34, new int[]{146});
    rules[81]=new Rule(-34, new int[]{147});
    rules[82]=new Rule(-34, new int[]{142});
    rules[83]=new Rule(-34, new int[]{143});
    rules[84]=new Rule(-33, new int[]{-35,-36,-33});
    rules[85]=new Rule(-33, new int[]{-35});
    rules[86]=new Rule(-36, new int[]{124});
    rules[87]=new Rule(-36, new int[]{38});
    rules[88]=new Rule(-36, new int[]{94});
    rules[89]=new Rule(-35, new int[]{-37,-38,-35});
    rules[90]=new Rule(-35, new int[]{-37});
    rules[91]=new Rule(-38, new int[]{43});
    rules[92]=new Rule(-38, new int[]{45});
    rules[93]=new Rule(-37, new int[]{-39,-40,-37});
    rules[94]=new Rule(-37, new int[]{-39});
    rules[95]=new Rule(-40, new int[]{42});
    rules[96]=new Rule(-40, new int[]{47});
    rules[97]=new Rule(-39, new int[]{-41,-42});
    rules[98]=new Rule(-39, new int[]{-42});
    rules[99]=new Rule(-41, new int[]{33});
    rules[100]=new Rule(-42, new int[]{-30,-27});
    rules[101]=new Rule(-42, new int[]{-30});
    rules[102]=new Rule(-42, new int[]{129});
    rules[103]=new Rule(-42, new int[]{-22});
    rules[104]=new Rule(-30, new int[]{128});
    rules[105]=new Rule(-30, new int[]{-30,46,128});
    rules[106]=new Rule(-30, new int[]{-30,46,126});

    nonTerminals = new string[] {"", "Program", "$accept", "Declarations", 
      "Declaration", "Declaration_", "Class1", "Type", "ParenParams", "Block", 
      "SimpleDeclaration", "SimpleDeclarations1", "SemiDeclaration", "Params1", 
      "OpenBlock", "CloseBlock", "BlockContent1", "Statements1", "Statement", 
      "SemiStatement", "ParenExprAlways", "ForHeader", "ParenExpr", "Expr", "ForBlock", 
      "AssignExpr", "Arguments1", "ParenArguments", "StartArg", "EndArg", "Identifier", 
      "RelExpr", "BoolOp", "BitExpr", "RelOp", "AddExpr", "BitOp", "MulExpr", 
      "AddOp", "PreExpr", "MulOp", "PrefixOp", "Factor", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 4: // Declarations -> Declaration error 
#line 50 "GeneratorSource\parser.y"
			{ CallHdlr("Expected Declaration", location_stack.array[value_stack.top-1]); }
        break;
      case 15: // SimpleDeclaration -> SemiDeclaration error ';' 
#line 74 "GeneratorSource\parser.y"
			{ CallHdlr("Bad declaration, expected ';'", location_stack.array[value_stack.top-2]); }
        break;
      case 21: // ParenParams -> '(' ')' 
#line 91 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-2], location_stack.array[value_stack.top-1]); }
        break;
      case 22: // ParenParams -> '(' Params1 ')' 
#line 92 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); }
        break;
      case 23: // ParenParams -> '(' Params1 error 
#line 93 "GeneratorSource\parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[value_stack.top-1]); }
        break;
      case 24: // ParenParams -> '(' error ')' 
#line 94 "GeneratorSource\parser.y"
			{ yyval = value_stack.array[value_stack.top-1];
                                   CallHdlr("error in params", location_stack.array[value_stack.top-2]); }
        break;
      case 30: // Block -> OpenBlock CloseBlock 
#line 113 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-2], location_stack.array[value_stack.top-1]); }
        break;
      case 31: // Block -> OpenBlock BlockContent1 CloseBlock 
#line 115 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); }
        break;
      case 32: // Block -> OpenBlock BlockContent1 error 
#line 117 "GeneratorSource\parser.y"
			{ CallHdlr("missing '}'", location_stack.array[value_stack.top-1]); }
        break;
      case 33: // Block -> OpenBlock error CloseBlock 
#line 119 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); }
        break;
      case 34: // OpenBlock -> '{' 
#line 123 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 35: // CloseBlock -> '}' 
#line 127 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 42: // Statement -> SemiStatement error ';' 
#line 143 "GeneratorSource\parser.y"
			{ CallHdlr("expected ';'", location_stack.array[value_stack.top-2]); }
        break;
      case 46: // Statement -> KWIF ParenExprAlways Statement KWELSE Statement 
#line 149 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 49: // ParenExprAlways -> error ')' 
#line 155 "GeneratorSource\parser.y"
			{ CallHdlr("error in expr", location_stack.array[value_stack.top-2]); }
        break;
      case 50: // ParenExprAlways -> error 
#line 156 "GeneratorSource\parser.y"
			{ CallHdlr("error in expr", location_stack.array[value_stack.top-1]); }
        break;
      case 51: // ParenExpr -> '(' Expr ')' 
#line 160 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); }
        break;
      case 52: // ParenExpr -> '(' Expr error 
#line 161 "GeneratorSource\parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[value_stack.top-1]); }
        break;
      case 53: // ForHeader -> '(' ForBlock ')' 
#line 165 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); }
        break;
      case 54: // ForHeader -> '(' ForBlock error 
#line 166 "GeneratorSource\parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[value_stack.top-1]); }
        break;
      case 55: // ForHeader -> '(' error ')' 
#line 167 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); 
                                  CallHdlr("error in for", location_stack.array[value_stack.top-2]); }
        break;
      case 63: // ParenArguments -> StartArg EndArg 
#line 188 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-2], location_stack.array[value_stack.top-1]); }
        break;
      case 64: // ParenArguments -> StartArg Arguments1 EndArg 
#line 189 "GeneratorSource\parser.y"
			{ Match(location_stack.array[value_stack.top-3], location_stack.array[value_stack.top-1]); }
        break;
      case 65: // ParenArguments -> StartArg Arguments1 error 
#line 190 "GeneratorSource\parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[value_stack.top-1]); }
        break;
      case 66: // StartArg -> '(' 
#line 194 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 67: // EndArg -> ')' 
#line 198 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 72: // Expr -> RelExpr RelExpr 
#line 209 "GeneratorSource\parser.y"
			{ CallHdlr("error in relational expression", location_stack.array[value_stack.top-1]); }
        break;
      case 73: // Expr -> error '}' 
#line 210 "GeneratorSource\parser.y"
			{ CallHdlr("unexpected symbol skipping to '}'", location_stack.array[value_stack.top-2]); }
        break;
      case 104: // Identifier -> IDENTIFIER 
#line 273 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 105: // Identifier -> Identifier '.' IDENTIFIER 
#line 274 "GeneratorSource\parser.y"
			{ /*  */ }
        break;
      case 106: // Identifier -> Identifier '.' error 
#line 275 "GeneratorSource\parser.y"
			{ CallHdlr("expected identifier", location_stack.array[value_stack.top-1]); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 278 "GeneratorSource\parser.y"




}
}
